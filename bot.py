import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
JOB_TITLE, COMPANY, LOCATION, SALARY, DESCRIPTION, LINK, CONFIRMATION = range(7)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [5665104217]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
user_data = {}

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
vacancies = []

def is_admin(user_id):
    return user_id in ADMIN_IDS

async def show_main_keyboard(update: Update, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if is_admin(user_id):
        keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π']]
    else:
        keyboard = [['–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π']]
        
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä"""
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã."
    )
    await show_main_keyboard(update, user.id)
    return ConversationHandler.END

async def add_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏."""
    user = update.message.from_user
    
    if not is_admin(user.id):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.")
        await show_main_keyboard(update, user.id)
        return ConversationHandler.END
        
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    return JOB_TITLE

async def job_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data[user.id] = {'job_title': update.message.text}
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    return COMPANY

async def company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data[user.id]['company'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞):")
    return LOCATION

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data[user.id]['location'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    return SALARY

async def salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data[user.id]['salary'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data[user.id]['description'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:")
    return LINK

async def link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_data[user.id]['link'] = update.message.text
    
    vacancy_preview = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_data[user.id]['job_title']}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {user_data[user.id]['company']}\n"
        f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data[user.id]['location']}\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {user_data[user.id]['salary']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data[user.id]['description']}\n"
        f"–°—Å—ã–ª–∫–∞: {user_data[user.id]['link']}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
    )
    
    await update.message.reply_text(vacancy_preview)
    return CONFIRMATION

async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    response = update.message.text.lower()
    
    if response == '–¥–∞':
        new_vacancy = user_data[user.id].copy()
        vacancies.append(new_vacancy)
        await update.message.reply_text("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    if user.id in user_data:
        del user_data[user.id]
    
    await show_main_keyboard(update, user.id)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id in user_data:
        del user_data[user.id]
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await show_main_keyboard(update, user.id)
    return ConversationHandler.END

async def search_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not vacancies:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return await show_main_keyboard(update, update.message.from_user.id)
    
    keyboard = []
    for i, vacancy in enumerate(vacancies, 1):
        keyboard.append([f"üìã –í–∞–∫–∞–Ω—Å–∏—è {i}: {vacancy['job_title']}"])
    keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=reply_markup)

async def show_vacancy_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text.startswith("üìã –í–∞–∫–∞–Ω—Å–∏—è ") and ":" in text:
        try:
            vacancy_num = int(text.split(" ")[2].split(":")[0]) - 1
            if 0 <= vacancy_num < len(vacancies):
                vacancy = vacancies[vacancy_num]
                
                vacancy_details = (
                    f"üè¢ **{vacancy['job_title']}**\n"
                    f"üìã **–ö–æ–º–ø–∞–Ω–∏—è:** {vacancy['company']}\n"
                    f"üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {vacancy['location']}\n"
                    f"üí∞ **–ó–∞—Ä–ø–ª–∞—Ç–∞:** {vacancy['salary']}\n"
                    f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {vacancy['description']}\n\n"
                    f"üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:** {vacancy['link']}"
                )
                
                keyboard = [[InlineKeyboardButton("üì® –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∫–ª–∏–∫—É", url=vacancy['link'])]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(vacancy_details, parse_mode='Markdown', reply_markup=reply_markup)
                await search_vacancies(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å–Ω–æ–≤–∞
                return
        except (ValueError, IndexError):
            pass
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    
    if text == '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é':
        return await add_vacancy(update, context)
    elif text == '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π':
        return await search_vacancies(update, context)
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)
    elif text.startswith('üìã –í–∞–∫–∞–Ω—Å–∏—è '):
        return await show_vacancy_details(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        await show_main_keyboard(update, user.id)

def main():
    application = Application.builder().token("8479511135:AAEhD0qcdqumLLCugBRTETviDh2FDSY93mk").build()

    # ConversationHandler —Å –í–°–ï–ú–ò —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é$'), add_vacancy),
            CommandHandler('add', add_vacancy)
        ],
        states={
            JOB_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, job_title)],
            COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, company)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
            SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, link)],  # –í–∞–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmation)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("cancel", cancel))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()